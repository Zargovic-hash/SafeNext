// scripts/runMigration.js
import fs from "fs";
import path from "path";
import { pool } from "../src/db.js"; // <-- ajuste le chemin si n√©cessaire

const FILE = path.resolve("migrations/dump.sql");

async function run() {
  const client = await pool.connect();
  let sql;
  try {
    console.log("üîå Lecture du fichier:", FILE);
    sql = fs.readFileSync(FILE, "utf8");

    console.log("‚öôÔ∏è Taille du fichier SQL:", sql.length, "octets");
    console.log("üöÄ Ex√©cution du script SQL ... (cela peut prendre du temps)");

    // Ex√©cution en une seule fois (marche pour la plupart des dumps simples)
    await client.query(sql);

    console.log("‚úÖ Migration termin√©e avec succ√®s !");
  } catch (err) {
    console.error("‚ùå Erreur lors de la migration (ex√©cution en une fois) :", err.message);

    // Fallback (tentative prudente) : ex√©cuter par statements s√©par√©s par ';'
    // ATTENTION : ce fallback casse parfois les fonctions/dollar-quoted strings.
    try {
      console.log("üîÅ Tentative de fallback : ex√©cution statement par statement");
      const statements = sql.split(/;\s*(\r?\n)/g).map(s => s.trim()).filter(Boolean);

      for (const st of statements) {
        if (!st) continue;
        try {
          await client.query(st);
        } catch (e) {
          console.error("   ‚ùå Erreur statement:", e.message);
          // Ne pas throw ‚Äî on continue pour tenter d'ex√©cuter la suite
        }
      }
      console.log("‚úÖ Fallback termin√© (v√©rifie les logs pour erreurs individuelles)");
    } catch (e2) {
      console.error("‚ùå Fallback √©chou√© :", e2.message);
    }
  } finally {
    client.release();
    // ne pas pool.end() si ton app continue √† tourner ; si tu veux quitter : await pool.end();
    process.exit(0);
  }
}

run();
